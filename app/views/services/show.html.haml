.row-fluid
  .span6.pull-left
    =link_to t(:back_to_services), services_path
  .span6.pull-right
    = simple_form_for @services, :url => service_path, :method => 'get', :html => {:class => "form-horizontal pull-right pull-down", :id => "service_form"}  do |f|
      = f.input :id, :collection => @services, :label => t(:select_service)+":", :selected => @service.id, :input_html => {:id => @service.id, :onchange => "$('#service_form').submit();"}

.well
  .row-fluid
    .span6
      %h2
        =@service.name
      %h3
        = t(:provided_by)
        = link_to @service.provider.name, admin_provider_path(@service.provider)
      -unless @service.active
        %h3.warning
          = t(:service_is_inactive)
      %h4
        =@service.phone
      %h4
        -if @service.url
          =link_to @service.url, @service.url
      %h5
        -if @service.external_id
          =t(:service_id).to_s + ": " + @service.external_id.to_s

    .span3
      .well
        %h3.text-center
          = t(:service_contact) + ":"
        %table.center.ALTtable-no-border
          %tr
            %td.text-left.h4
              = t(:contact) + ":"
            %td.text-left
              %b=@service.contact.to_s
          %tr
            %td.text-left.h4
              = t(:title)+":  "
            %td.text-left
              %b=@service.contact_title.to_s
          %tr
            %td.text-left.h4
              = t(:email)+ ":  "
            %td.text-left
              %b=@service.email.to_s


    .span3
      .well
        %h3.text-center
          =t(:provider_contact_info) +":"
        %table.center.ALTtable-no-border
          %tr
            %td.text-left.h4
              =t(:contact) +":"
            %td.text-left
              %b=@service.provider.contact.to_s
          %tr
            %td.text-left.h4
              = t(:title)+":  "
            %td.text-left
              %b=@service.provider.contact_title.to_s
          %tr
            %td.text-left.h4
              = t(:email)+ ":  "
            %td.text-left
              %b=@service.provider.email.to_s
          %tr
            %td.text-left.h4
              =t(:phone) + ": "
            %td.text-left
              %b=@service.provider.phone.to_s
          %tr
            %td.text-left.h4
              =t(:address) + ": "
            %td.text-left
              %b=@service.provider.address.to_s
          %tr
            %td.text-left.h4
            %td.text-left
              %b=@service.provider.city.to_s + ' ' + @service.provider.state.to_s + ' ' + @service.provider.zip.to_s
          %tr
            %td.text-left.h4
              =t(:url) + ": "
            %td.text-left
              = link_to @service.provider.url.to_s, @service.provider.url.to_s

.row-fluid
  .span4
    .well.well1
      %h4=t(:accommodations)
      .well.white-well.wwell1
        -if @service.accommodations.count == 0
          = t(:no_accommodations)
        -else
          %ul
            -@service.accommodations.each do |accom|
              %li
                =t(accom.name)
  .span4
    .well.well1
      %h4= t(:eligibility)
      = t(:eligibility_rules_descr)
      .well.white-well.wwell1
        -if @service.service_characteristics.count > 0
          %ul
          -groups = @service.service_characteristics.map(&:group).uniq
          -groups.each do |group|
            -group_string = ""
            -@service.service_characteristics.where(group: group).each do |map|
              -if map.characteristic.code == "age"
                -group_string += "Age is "+ @eh.relationship_to_words(map.value_relationship_id).to_s + " " + map.value.to_s + " "
              -else
                -group_string += t(map.characteristic.name) + " "
              -group_string += "AND "
            %li
              =group_string[0..-6]
        -else
          = t(:no_restriction)

  .span4
    .well.well1
      %h4= t(:trip_purposes)
      .well.white-well.wwell1
        -if @service.trip_purposes.count == 0
          = t(:no_restriction)
        -else
          %ul
            -@service.trip_purposes.each do |purpose|
              %li
                =t(purpose.name)

.row-fluid
  .span4
    .well.well2
      %h4= t(:fare)
      -@service.fare_structures.each do |fare|
        .well.white-well.wwell2
          .row_fluid
            -if fare.base
              %b=t(:cost)
              =number_to_currency(fare.base.to_f).to_s
            -else
              %b=t(:cost)
              =t(:flat_fare_unavailable) + "."
          %b=t(:comments) + ":  "
          -if fare.desc
            =fare.desc.html_safe
          -else
            =""
  .span4
    .well.well2
      %h4= t(:schedule)
      %table.ALTtable
        %tr
          %th.text-center
            Day
          %th.text-center
            Start Time
          %th.text-center
            End Time
        %tbody
          -@service.schedules.order(:day_of_week, :start_seconds, :end_seconds).each do |schedule|
            %tr
              %td.text-center
                =Date::DAYNAMES[schedule.day_of_week]
              %td.text-center
                =schedule.start_string
              %td.text-center
                =schedule.end_string
  .span4
    .well.well2
      %h4= t(:advance_notice_required)
      .well.white-well.wwell2
        -if @service.advanced_notice_minutes > 0
          =t(:service_notice_required) + " " ## TODO Interpolate
          %b=duration_to_words(@service.advanced_notice_minutes*60, :suppress_minutes => true, :days_only => true).downcase
          =" " + t(:service_notice_str) + "."
        -else
          =t(:service_notice_not_required) + "."
.well
  .row-fluid.text-center
    .span12
      %h3= t(:coverage_areas)

  .row-fluid
    -types = @service.coverage_areas.map(&:coverage_type).uniq
    -['Origins', 'Destinations', 'Residences'].each do |rule| ##TODO Internationalize
      .span4
        %h4=rule
        -types.each do |type|
          %b
            =type.humanize.split[0].pluralize + ' ' + t(:served_areas)
          .well.white-well.text-left
            -coverage_string = ""
            -@service.service_coverage_maps.where(rule: rule.singularize.downcase).each do |map|
              -if map.geo_coverage.coverage_type == type
                -coverage_string += map.geo_coverage.value + ', '
            -if coverage_string == ""
              = t(:n_a)
            -else
              =coverage_string.chop.chop
            .span4

.row-fluid.text-center
  .span3
  .span6
    %h4=t(:service_area_map)
    .well.white-well

      = LeafletMap({ :mapid => "lmap_" + "origin",  :polylines => @polylines['origin'], :tile_provider => 'GOOGLEMAP', :min_zoom => 3, :max_zoom => 15, :style => "height:500px;" })
  .span3
= yield :scripts


:javascript
  boxes = $('.well1');
  maxHeight = Math.max.apply(
    Math, boxes.map(function() {
      return $(this).height();
  }).get());
  boxes.height(maxHeight);

  boxes = $('.well2');
  maxHeight = Math.max.apply(
    Math, boxes.map(function() {
      return $(this).height();
  }).get());
  boxes.height(maxHeight);
